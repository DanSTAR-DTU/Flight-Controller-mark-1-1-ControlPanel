
// File writing
var fs = require('fs');

// Networking
var socket = require("socket.io");
var udp = require('dgram');

// Web server
var express = require('express');
var favicon = require('serve-favicon')
var path = require('path')

var app = express();
var server = app.listen('3000');
app.use(express.static('Public'));
app.use(favicon(path.join(__dirname, 'Public/res', 'favicon.png')))

// Front end
var io = socket(server)

// Beaglebone
var UDPSocket = udp.createSocket('udp4');
var startTime = Date.now();
var historyData = {TC: [], VALVE: [], ACTUATOR: [], FLOW: [], PRESSURE: [], LOAD: []};
var timeStamp = {year:'', month:'', day:'', hours:'', minutes: '', seconds:''};
var MODEL = {
    SENSORS: {
        SV_FLUSH: {value: "CLOSED", type: "VALVE", lastUpdated: 0},
        SV_N2O: {value: "CLOSED", type: "VALVE", lastUpdated: 0},
        SV_N2O_FILL: {value: "CLOSED", type: "VALVE", lastUpdated: 0},
        SV_IPA: {value: "CLOSED", type: "VALVE", lastUpdated: 0},

        PT_N2: {value: 0, type: "PRESSURE_SENSOR", lastUpdated: 0},
        PT_IPA: {value: 0, type: "PRESSURE_SENSOR", lastUpdated: 0},
        PT_N2O: {value: 0, type: "PRESSURE_SENSOR", lastUpdated: 0},
        PT_FUEL: {value: 0, type: "PRESSURE_SENSOR", lastUpdated: 0},
        PT_OX: {value: 0, type: "PRESSURE_SENSOR", lastUpdated: 0},
        PT_CHAM: {value: 0, type: "PRESSURE_SENSOR", lastUpdated: 0},

        TC_IPA: {value: 0, type: "TEMPERATURE_SENSOR", lastUpdated: 0},
        TC_N2O: {value: 0, type: "TEMPERATURE_SENSOR", lastUpdated: 0},

        TC_1: {value: 0, type: "TEMPERATURE_SENSOR", lastUpdated: 0},
        TC_2: {value: 0, type: "TEMPERATURE_SENSOR", lastUpdated: 0},
        TC_3: {value: 0, type: "TEMPERATURE_SENSOR", lastUpdated: 0},
        TC_4: {value: 0, type: "TEMPERATURE_SENSOR", lastUpdated: 0},
        TC_5: {value: 0, type: "TEMPERATURE_SENSOR", lastUpdated: 0},
        TC_6: {value: 0, type: "TEMPERATURE_SENSOR", lastUpdated: 0},

        FLO_IPA: {value: 0, initial: 20, accumulated: 0, type: "FLOW_SENSOR", lastUpdated: 0, density: 786},
        FLO_N2O: {value: 0, initial: 20, accumulated: 0, type: "FLOW_SENSOR", lastUpdated: 0, density: 1071},

        LOAD: {value: 0, type: "LOAD_CELL", lastUpdated: 0},

        ACT_IPA: {value: 0, type: "ACTUATOR", lastUpdated: 0},
        ACT_N2O: {value: 0, type: "ACTUATOR", lastUpdated: 0}
    },
    IS_LOGGING: false,
};

const UDP_IP = "192.168.2.2";
//const UDP_IP = "localhost";
const UDP_PORT = 5000;

io.sockets.on('connection', function (socket) {
    console.log("client connected")
    socket.emit("graph_history", historyData);

    socket.on("flowrate_density_change", (data) => {
        if (!isNaN(data.density)) {
            MODEL.SENSORS[data.name].density = data.density;
            console.log("Flowrate density changed to " + MODEL.SENSORS[data.name].density);
            emitModel();
        } else {
            console.log("Flowrate tried to set to NaN!");
        }
    });

    socket.on("refresh_model", (data) => {
        emitModel();
    });

    socket.on("valve", function (data) {
        if (data.value == "OPEN") {
            MODEL.SENSORS[data.name].value = "OPEN";
            sendToBeagle("VALVE", {name: data.name, value: "OPEN"});
        } else if (data.value == "CLOSED") {
            MODEL.SENSORS[data.name].value = "CLOSED";
            sendToBeagle("VALVE", {name: data.name, value: "CLOSED"});
        } else {
            console.log("Valve: " + data.name + " tried to set to value: " + data.value);
        }
        
    });

    socket.on('actuator_set', (data) => {
        console.log(data);
        // Update model
        if (data.type == "SINGLE") {
            if(data.name == "ACT_IPA_VALUE") {
                MODEL.SENSORS.ACT_IPA.value = data.value;
                sendToBeagle("ACTUATOR", {type: "SINGLE", name: "ACT_IPA_VALUE", value: data.value});
            } else if (data.name == "ACT_N2O_VALUE") {
                MODEL.SENSORS.ACT_N2O.value = data.value;
                sendToBeagle("ACTUATOR", {type: "SINGLE", name: "ACT_N2O_VALUE", value
// File writing
var fs = require('fs');

// Networking
var socket = require("socket.io");
var udp = require('dgram');

// Web server
var express = require('express');
var favicon = require('serve-favicon')
var path = require('path')

var app = express();
var server = app.listen('3000');
app.use(express.static('Public'));
app.use(favicon(path.join(__dirname, 'Public/res', 'favicon.png')))

// Front end
var io = socket(server)

// Beaglebone
var UDPSocket = udp.createSocket('udp4');
var startTime = Date.now();
var historyData = {TC: [], VALVE: [], ACTUATOR: [], FLOW: [], PRESSURE: [], LOAD: []};
var timeStamp = {year:'', month:'', day:'', hours:'', minutes: '', seconds:''};
var MODEL = {
    SENSORS: {
        SV_FLUSH: {value: "CLOSED", type: "VALVE", lastUpdated: 0},
        SV_N2O: {value: "CLOSED", type: "VALVE", lastUpdated: 0},
        SV_N2O_FILL: {value: "CLOSED", type: "VALVE", lastUpdated: 0},
        SV_IPA: {value: "CLOSED", type: "VALVE", lastUpdated: 0},

        PT_N2: {value: 0, type: "PRESSURE_SENSOR", lastUpdated: 0},
        PT_IPA: {value: 0, type: "PRESSURE_SENSOR", lastUpdated: 0},
        PT_N2O: {value: 0, type: "PRESSURE_SENSOR", lastUpdated: 0},
        PT_FUEL: {value: 0, type: "PRESSURE_SENSOR", lastUpdated: 0},
        PT_OX: {value: 0, type: "PRESSURE_SENSOR", lastUpdated: 0},
        PT_CHAM: {value: 0, type: "PRESSURE_SENSOR", lastUpdated: 0},

        TC_IPA: {value: 0, type: "TEMPERATURE_SENSOR", lastUpdated: 0},
        TC_N2O: {value: 0, type: "TEMPERATURE_SENSOR", lastUpdated: 0},

        TC_1: {value: 0, type: "TEMPERATURE_SENSOR", lastUpdated: 0},
        TC_2: {value: 0, type: "TEMPERATURE_SENSOR", lastUpdated: 0},
        TC_3: {value: 0, type: "TEMPERATURE_SENSOR", lastUpdated: 0},
        TC_4: {value: 0, type: "TEMPERATURE_SENSOR", lastUpdated: 0},
        TC_5: {value: 0, type: "TEMPERATURE_SENSOR", lastUpdated: 0},
        TC_6: {value: 0, type: "TEMPERATURE_SENSOR", lastUpdated: 0},

        FLO_IPA: {value: 0, initial: 20, accumulated: 0, type: "FLOW_SENSOR", lastUpdated: 0, density: 786},
        FLO_N2O: {value: 0, initial: 20, accumulated: 0, type: "FLOW_SENSOR", lastUpdated: 0, density: 1071},

        LOAD: {value: 0, type: "LOAD_CELL", lastUpdated: 0},

        ACT_IPA: {value: 0, type: "ACTUATOR", lastUpdated: 0},
        ACT_N2O: {value: 0, type: "ACTUATOR", lastUpdated: 0}
    },
    IS_LOGGING: false,
};

const UDP_IP = "192.168.2.2";
//const UDP_IP = "localhost";
const UDP_PORT = 5000;

io.sockets.on('connection', function (socket) {
    console.log("client connected")
    socket.emit("graph_history", historyData);

    socket.on("flowrate_density_change", (data) => {
        if (!isNaN(data.density)) {
            MODEL.SENSORS[data.name].density = data.density;
            console.log("Flowrate density changed to " + MODEL.SENSORS[data.name].density);
            emitModel();
        } else {
            console.log("Flowrate tried to set to NaN!");
        }
    });

    socket.on("refresh_model", (data) => {
        emitModel();
    });

    socket.on("valve", function (data) {
        if (data.value == "OPEN") {
            MODEL.SENSORS[data.name].value = "OPEN";
            sendToBeagle("VALVE", {name: data.name, value: "OPEN"});
        } else if (data.value == "CLOSED") {
            MODEL.SENSORS[data.name].value = "CLOSED";
            sendToBeagle("VALVE", {name: data.name, value: "CLOSED"});
        } else {
            console.log("Valve: " + data.name + " tried to set to value: " + data.value);
        }
        
    });

    socket.on('actuator_set', (data) => {
        console.log(data);
        // Update model
        if (data.type == "SINGLE") {
            if(data.name == "ACT_IPA_VALUE") {
                MODEL.SENSORS.ACT_IPA.value = data.value;
                sendToBeagle("ACTUATOR", {type: "SINGLE", name: "ACT_IPA_VALUE", value: data.value});
            } else if (data.name == "ACT_N2O_VALUE") {
                MODEL.SENSORS.ACT_N2O.value = data.value;
                sendToBeagle("ACTUATOR", {type: "SINGLE", name: "ACT_N2O_VALUE", value